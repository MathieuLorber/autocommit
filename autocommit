#!/usr/bin/env python2

import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from subprocess import call

# TODO a parameter np for "no pull/push" option (disconnected, or no master)
# TODO a parameter to choose the directory

def commit():
    call("echo ================ COMMIT BEGIN ================", shell=True)
    call("git add -A", shell=True)
    call("git commit -m 'autocommit'", shell=True)

    call("echo ================= PULL BEGIN =================", shell=True)
    pullResult = call("git pull origin master", shell=True)
    if pullResult == 1:
        call("terminal-notifier -message 'Erreur de git pull' -title 'git pull error'", shell=True)
    call("echo ================= PUSH BEGIN =================", shell=True)
    pushResult = call("git push origin master", shell=True)
    if pushResult == 1:
        call("terminal-notifier -message 'Erreur de git push, conflicts de merge ?' -title 'git push error'", shell=True)
    call("echo ==================== END =====================", shell=True)

class AutoCommit(FileSystemEventHandler):
    # several events, 'modified' allways happens
    def on_modified(self, event):
        # TODO do it smarter...
        if not '.git' in event.src_path:
            print(event.src_path)
            commit()

if __name__ == "__main__":
    observer = Observer()
    # if no /content dir, .git is a problem -> it should be filtered...
    observer.schedule(AutoCommit(), path='.', recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
